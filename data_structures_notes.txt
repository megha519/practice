Examples
1. Basic Lambda
# A lambda that doubles a number
double = lambda x: x * 2
print(double(5))  # Output: 10

  
2. Lambda with Multiple Arguments
# A lambda that adds two numbers
add = lambda x, y: x + y
print(add(3, 7))  # Output: 10

  
3. Using Lambda with map()
# Use lambda to square numbers in a list
nums = [1, 2, 3, 4]
squared = list(map(lambda x: x ** 2, nums))
print(squared)  # Output: [1, 4, 9, 16]

  
4. Using Lambda with filter()
# Use lambda to filter out even numbers
nums = [1, 2, 3, 4, 5, 6]
evens = list(filter(lambda x: x % 2 == 0, nums))
print(evens)  # Output: [2, 4, 6]

  
5. Using Lambda with reduce()
from functools import reduce
# Use lambda to multiply all elements in a list
nums = [2, 3, 4]
product = reduce(lambda x, y: x * y, nums)
print(product)  # Output: 24






from collections import Counter
def user_logic(n, x, arr):
    """
    Write your logic here.
    Parameters:
        n (int): The length of the list
        x (int): The number of times a distinct number must appear
        arr (list): List of integers
    Returns:
        int: Sum of all distinct numbers that appear exactly x times in the list, or -1 if no such number exists
    """
    freq = Counter(arr)
    k = [key for key, value in freq.items() if value==x]
    return sum(k) if k else -1
    

def main():
    import sys
    input = sys.stdin.read
    data = input().strip().split()
    
    index = 0
    T = int(data[index])
    index += 1
    results = []
    
    for _ in range(T):
        N = int(data[index])
        X = int(data[index + 1])
        index += 2
        arr = list(map(int, data[index:index + N]))
        index += N
        
        # Call user logic function and store the result
        result = user_logic(N, X, arr)
        results.append(result)
    
    # Print all results for each test case
    for result in results:
        print(result)

if __name__ == "__main__":
    main()





from queue import PriorityQueue
k = [5,3,7,1,9]
pq = PriorityQueue()
[pq.put(i) for i in k]
print(pq.get())
print(pq.get())
print(pq.get())
print(pq.get())
print(pq.get())

output:
1
3
5
7
9








import heapq
matrix = [[1,2,3], [3,2,1],[6,7,8]]
row = len(matrix)
col = len(matrix[0])
blank = [[float('inf')]*col for _ in range(row)]
blank[0][0] = matrix[0][0]
directions = [(0,1), (1,0)]
min_heap = [(matrix[0][0], 0, 0)]
while min_heap:
    cost, r, c = heapq.heappop(min_heap)
    if r == row-1 and c == col-1:
        print(cost)
    else:
        for dr,dc in directions:
            new_r, new_c = r+dr, c+dc
            if 0<=new_r<row and 0<=new_c<col:
                new_cost = cost+matrix[new_r][new_c]
                if new_cost<blank[new_r][new_c]:
                    blank[new_r][new_c] = new_cost
                    heapq.heappush(min_heap, (new_cost, new_r, new_c))
                    
        
