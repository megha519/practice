The Two Pointers technique is a common algorithmic method used to solve array and sequence problems efficiently. This approach utilizes two indices (pointers) that move within the array to meet specific conditions or constraints. The key idea is to iteratively adjust these pointers based on some condition until the desired result is achieved.


@find two numbers that can be multiplied to get the result:
k = sorted([4,3,5,2,1])
i, j = 0,len(k)-1
target = 8
while i<j:
    num = k[i]*k[j]
    if num<target:
        i+=1
    elif num>target:
        j-=1
    else:
        print(k[i],k[j])
        break


@@ to find the number of subarrays using 2 pointer
k = [6 , 0,8, 2, 1, 5,3, 4]
i,j = 0,0
subarrays = []
while i<len(k):
    j=i
    while j <len(k):
        subarray = k[i:j]
        if subarray:
            subarrays.append(subarray)
        j+=1
    i+=1
print(subarrays)


@ find  Minimum Subarray with Product >= target
from functools import reduce
k = [6 , 10,8, 2, 1, 5,3, 4]
target = 60
i,j = 0,0
final_arrays = []
while i<len(k):
    j = i+1
    while j<=len(k):
        subarray = k[i:j]
        
        product = reduce(lambda x,y:x*y,subarray)
        if product == target:
            final_arrays.append(subarray)
        j+=1
    i+=1
if final_arrays:
    print(min(final_arrays,key=len))
else:
    print('nill')

        




@@ container with most water

def maxArea(height):
    
    # Write your code here.
    n = len(height)
    i = 0
    j = n-1
    globalarea = -1
    while i<j:
        minheight = min(height[i], height[j])
        globalarea = max(globalarea, (j-i)*minheight)
        if height[i]<=minheight:
            i+=1
        else:
            j-=1
    return globalarea




@@  sum of two elements equals the third

from os import *
from sys import *
from collections import *
from math import *

def findTriplet(arr,n):
	# Write your code here
	# Return a list containing either 3 or 0 elements.
	ans = list()
	arr.sort()
	for i in range(n-1, -1, -1):
		j, k = 0, i-1
		while j<k:
			if arr[i]==arr[j]+arr[k]:
				ans.extend([arr[i],arr[j],arr[k]])
				return ans
			elif arr[i]>arr[j]+arr[k]:
				j+=1
			else:
				k-=1
	return ans

@@@ valid string

def checkValidString(s):
    left_balance = 0
    for char in s:
        if char == '(' or char == '*':
            left_balance += 1
        else:
            left_balance -= 1
        if left_balance < 0:
            return False  # If balance goes negative, we have unmatched ')'
    
    # Second pass to check for unmatched ')'
    right_balance = 0
    for char in reversed(s):
        if char == ')' or char == '*':
            right_balance += 1
        else:
            right_balance -= 1
        if right_balance < 0:
            return False  # If balance goes negative, we have unmatched '('
    
    return True 




@@ is subsequence

def isSubSequence(str1, str2):
    # Initialize two pointers for str1 and str2
    i, j = 0, 0

    # Traverse str2
    while i < len(str1) and j < len(str2):
        # If characters match, move pointer of str1
        if str1[i] == str2[j]:
            i += 1
        # Always move pointer of str2
        j += 1

    # If all characters of str1 are found in str2 in order
    return i == len(str1)
